#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.28.1 clang-1200.0.30.1)
#ifndef THREADS_SWIFT_H
#define THREADS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Threads",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

/// A layout manager capable of drawing the custom attributes set by the <code>DownStyler</code>.
/// Insert this into a TextKit stack manually, or use the provided <code>DownTextView</code>.
SWIFT_CLASS("_TtC7Threads17DownLayoutManager")
@interface DownLayoutManager : NSLayoutManager
- (void)drawGlyphsForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A layout manager that draws the line fragments.
/// Line fragments are the areas with a document that contain lines of text. There
/// are two types.
/// <ol>
///   <li>
///     A <em>line rect</em> (drawn in red) indicates the maximum rect enclosing the line.
///     This inlcudes not only the textual content, but also the padding (if any) around that text.
///   </li>
///   <li>
///     A <em>line used rect</em> (drawn in blue) is the smallest rect enclosing the textual content.
///   </li>
/// </ol>
/// The visualization of these rects is useful when determining the paragraph styles
/// of a <code>DownStyler</code>.
/// Insert this into a TextKit stack manually, or use the provided <code>DownDebugTextView</code>.
SWIFT_CLASS("_TtC7Threads22DownDebugLayoutManager")
@interface DownDebugLayoutManager : DownLayoutManager
- (void)drawGlyphsForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;

/// A text view capable of parsing and rendering markdown via the AST.
SWIFT_CLASS("_TtC7Threads12DownTextView")
@interface DownTextView : UITextView
@property (nonatomic, copy) NSString * _Null_unspecified text;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer SWIFT_UNAVAILABLE;
@end


/// A text view capable of parsing and rendering markdown via the AST, as well as line fragments.
/// See <code>DownDebugLayoutManager</code>.
SWIFT_CLASS("_TtC7Threads17DownDebugTextView")
@interface DownDebugTextView : DownTextView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC7Threads8DownView")
@interface DownView : WKWebView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration SWIFT_UNAVAILABLE;
@end


@class WKNavigationResponse;
@class WKNavigationAction;
@class WKNavigation;

@interface DownView (SWIFT_EXTENSION(Threads)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
@end









@interface NSNumber (SWIFT_EXTENSION(Threads))
+ (NSTimeInterval)minutes:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)hours:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)days:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)weeks:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)months:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)years:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
@end



/// OGP cache object
SWIFT_CLASS("_TtC7Threads11OGCacheData")
@interface OGCacheData : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nullable createDate;
@property (nonatomic, readonly, copy) NSDate * _Nullable updateDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol of OGP cache manager
/// If define OGP Cahce manage class with this protocol, be able to set OGDataProvider.cacheManager.
SWIFT_PROTOCOL("_TtP7Threads26OGDataCacheManagerProtocol_")
@protocol OGDataCacheManagerProtocol <NSObject>
@property (nonatomic) NSTimeInterval updateInterval;
- (void)fetchOrInsertOGCacheDataWithUrl:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(OGCacheData * _Nonnull))completion;
- (void)fetchOGCacheDataWithUrl:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(OGCacheData * _Nullable))completion;
- (void)updateIfNeededWithCache:(OGCacheData * _Nonnull)cache;
- (void)deleteOGCacheDateWithCache:(OGCacheData * _Nonnull)cache completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// Non cached feature class
/// Has no OGP cache
SWIFT_CLASS("_TtC7Threads20OGDataNoCacheManager")
@interface OGDataNoCacheManager : NSObject <OGDataCacheManagerProtocol>
@property (nonatomic) NSTimeInterval updateInterval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)fetchOrInsertOGCacheDataWithUrl:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(OGCacheData * _Nonnull))completion;
- (void)fetchOGCacheDataWithUrl:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(OGCacheData * _Nullable))completion;
- (void)updateIfNeededWithCache:(OGCacheData * _Nonnull)cache;
- (void)deleteOGCacheDateWithCache:(OGCacheData * _Nonnull)cache completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

@class OpenGraphData;
@class Task;

/// Provides OGP object from cache or API
SWIFT_CLASS("_TtC7Threads14OGDataProvider")
@interface OGDataProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OGDataProvider * _Nonnull sharedInstance;)
+ (OGDataProvider * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Represents cache feature
/// Default cache feature is using Core Data
/// seealso:
/// OGDataCacheManagerProtocol
@property (nonatomic, strong) id <OGDataCacheManagerProtocol> _Nonnull cacheManager;
@property (nonatomic) NSTimeInterval updateInterval;
- (Task * _Nonnull)fetchOGDataWithURLString:(NSString * _Nonnull)urlString completion:(void (^ _Nullable)(OpenGraphData * _Nonnull, NSError * _Nullable))completion;
- (void)deleteOGDataWithUrlString:(NSString * _Nonnull)urlString completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)deleteOGData:(OpenGraphData * _Nonnull)ogData completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)cancelLoading:(Task * _Nonnull)task shouldContinueDownloading:(BOOL)shouldContinueDownloading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;

/// Provides Image from cache or API
SWIFT_CLASS("_TtC7Threads15OGImageProvider")
@interface OGImageProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OGImageProvider * _Nonnull sharedInstance;)
+ (OGImageProvider * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (Task * _Nullable)loadImageWithURLString:(NSString * _Nonnull)urlString completion:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (void)clearMemoryCache;
- (void)clearAllCache;
- (void)cancelLoading:(Task * _Nonnull)task shouldContinueDownloading:(BOOL)shouldContinueDownloading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// OGP object for Objective-C
SWIFT_CLASS("_TtC7Threads13OpenGraphData")
@interface OpenGraphData : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable imageUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable pageDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable pageTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable pageType;
@property (nonatomic, readonly, copy) NSString * _Nullable siteName;
@property (nonatomic, readonly, copy) NSURL * _Nullable sourceUrl;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// OGP object downloader
SWIFT_CLASS("_TtC7Threads23OpenGraphDataDownloader")
@interface OpenGraphDataDownloader : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OpenGraphDataDownloader * _Nonnull sharedInstance;)
+ (OpenGraphDataDownloader * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (Task * _Nonnull)fetchOGDataWithURLString:(NSString * _Nonnull)urlString completion:(void (^ _Nullable)(OpenGraphData * _Nullable, NSError * _Nullable))completion;
- (void)cancelLoading:(Task * _Nonnull)task shouldContinueDownloading:(BOOL)shouldContinueDownloading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC7Threads10QuickReply")
@interface QuickReply : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSLayoutConstraint;
@class UIButton;
@class UINib;
@protocol QuickReplyCellDelegate;
@class UITraitCollection;

SWIFT_CLASS("_TtC7Threads14QuickReplyCell")
@interface QuickReplyCell : UICollectionViewCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QuickReplyCell * _Null_unspecified sizingCell;)
+ (QuickReplyCell * _Null_unspecified)sizingCell SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified cellWidth;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified actionButton;
+ (NSString * _Nonnull)cellIdentifier SWIFT_WARN_UNUSED_RESULT;
+ (UINib * _Nonnull)nib SWIFT_WARN_UNUSED_RESULT;
- (void)awakeFromNib;
- (void)configureWithQuickReply:(QuickReply * _Nonnull)quickReply delegate:(id <QuickReplyCellDelegate> _Nonnull)delegate;
- (void)setWidth:(CGFloat)width;
- (void)prepareForReuse;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7Threads22QuickReplyCellDelegate_")
@protocol QuickReplyCellDelegate
- (void)didSelectQuickReply:(QuickReply * _Nonnull)quickReply;
@end

enum Connection : NSInteger;

SWIFT_CLASS("_TtC7Threads16ReachabilityObjC")
@interface ReachabilityObjC : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ReachabilityObjC * _Nonnull shared;)
+ (ReachabilityObjC * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)startNotifying:(void (^ _Nonnull)(ReachabilityObjC * _Nonnull))listener;
+ (void)startNotifying;
+ (void)stopNotifying;
+ (void)whenReachable:(void (^ _Nonnull)(ReachabilityObjC * _Nonnull))reachable;
+ (void)whenUnreachable:(void (^ _Nonnull)(ReachabilityObjC * _Nonnull))unreachable;
+ (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
- (enum Connection)getConnection SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, Connection, open) {
  ConnectionUnavailable = 0,
  ConnectionWifi = 1,
  ConnectionCellular = 2,
};


SWIFT_CLASS("_TtC7Threads4Task")
@interface Task : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class THRMessage;

SWIFT_CLASS("_TtC7Threads16ThreadsServerAPI")
@interface ThreadsServerAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apiVersion;)
+ (NSString * _Nonnull)apiVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setServerWithBaseUrl:(NSURL * _Nonnull)baseUrl;
+ (void)markMessagesRead:(NSArray<THRMessage *> * _Nonnull)messages completion:(void (^ _Nonnull)(NSArray<THRMessage *> * _Nullable, NSError * _Nullable))completion;
+ (void)getHistoryMessagesWithClientId:(NSString * _Nonnull)clientId count:(NSInteger)count beforeMessage:(THRMessage * _Nullable)beforeMessage completion:(void (^ _Nonnull)(NSArray<THRMessage *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class THRAttributes;
@class NSAttributedString;

SWIFT_CLASS("_TtC7Threads23TransportMessagesParser")
@interface TransportMessagesParser : NSObject
+ (NSArray<QuickReply *> * _Nullable)getQuickRepliesFromDict:(NSDictionary<NSString *, id> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
+ (NSAttributedString * _Nonnull)getAttrStringFromMarkdown:(NSString * _Nonnull)string withAttributes:(THRAttributes * _Nonnull)attributes isOutgoing:(BOOL)isOutgoing SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.28.1 clang-1200.0.30.1)
#ifndef THREADS_SWIFT_H
#define THREADS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Threads",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

/// A layout manager capable of drawing the custom attributes set by the <code>DownStyler</code>.
/// Insert this into a TextKit stack manually, or use the provided <code>DownTextView</code>.
SWIFT_CLASS("_TtC7Threads17DownLayoutManager")
@interface DownLayoutManager : NSLayoutManager
- (void)drawGlyphsForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A layout manager that draws the line fragments.
/// Line fragments are the areas with a document that contain lines of text. There
/// are two types.
/// <ol>
///   <li>
///     A <em>line rect</em> (drawn in red) indicates the maximum rect enclosing the line.
///     This inlcudes not only the textual content, but also the padding (if any) around that text.
///   </li>
///   <li>
///     A <em>line used rect</em> (drawn in blue) is the smallest rect enclosing the textual content.
///   </li>
/// </ol>
/// The visualization of these rects is useful when determining the paragraph styles
/// of a <code>DownStyler</code>.
/// Insert this into a TextKit stack manually, or use the provided <code>DownDebugTextView</code>.
SWIFT_CLASS("_TtC7Threads22DownDebugLayoutManager")
@interface DownDebugLayoutManager : DownLayoutManager
- (void)drawGlyphsForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;

/// A text view capable of parsing and rendering markdown via the AST.
SWIFT_CLASS("_TtC7Threads12DownTextView")
@interface DownTextView : UITextView
@property (nonatomic, copy) NSString * _Null_unspecified text;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer SWIFT_UNAVAILABLE;
@end


/// A text view capable of parsing and rendering markdown via the AST, as well as line fragments.
/// See <code>DownDebugLayoutManager</code>.
SWIFT_CLASS("_TtC7Threads17DownDebugTextView")
@interface DownDebugTextView : DownTextView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC7Threads8DownView")
@interface DownView : WKWebView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration SWIFT_UNAVAILABLE;
@end


@class WKNavigationResponse;
@class WKNavigationAction;
@class WKNavigation;

@interface DownView (SWIFT_EXTENSION(Threads)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
@end









@interface NSNumber (SWIFT_EXTENSION(Threads))
+ (NSTimeInterval)minutes:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)hours:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)days:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)weeks:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)months:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)years:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
@end



/// OGP cache object
SWIFT_CLASS("_TtC7Threads11OGCacheData")
@interface OGCacheData : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nullable createDate;
@property (nonatomic, readonly, copy) NSDate * _Nullable updateDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol of OGP cache manager
/// If define OGP Cahce manage class with this protocol, be able to set OGDataProvider.cacheManager.
SWIFT_PROTOCOL("_TtP7Threads26OGDataCacheManagerProtocol_")
@protocol OGDataCacheManagerProtocol <NSObject>
@property (nonatomic) NSTimeInterval updateInterval;
- (void)fetchOrInsertOGCacheDataWithUrl:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(OGCacheData * _Nonnull))completion;
- (void)fetchOGCacheDataWithUrl:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(OGCacheData * _Nullable))completion;
- (void)updateIfNeededWithCache:(OGCacheData * _Nonnull)cache;
- (void)deleteOGCacheDateWithCache:(OGCacheData * _Nonnull)cache completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// Non cached feature class
/// Has no OGP cache
SWIFT_CLASS("_TtC7Threads20OGDataNoCacheManager")
@interface OGDataNoCacheManager : NSObject <OGDataCacheManagerProtocol>
@property (nonatomic) NSTimeInterval updateInterval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)fetchOrInsertOGCacheDataWithUrl:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(OGCacheData * _Nonnull))completion;
- (void)fetchOGCacheDataWithUrl:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(OGCacheData * _Nullable))completion;
- (void)updateIfNeededWithCache:(OGCacheData * _Nonnull)cache;
- (void)deleteOGCacheDateWithCache:(OGCacheData * _Nonnull)cache completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

@class OpenGraphData;
@class Task;

/// Provides OGP object from cache or API
SWIFT_CLASS("_TtC7Threads14OGDataProvider")
@interface OGDataProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OGDataProvider * _Nonnull sharedInstance;)
+ (OGDataProvider * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Represents cache feature
/// Default cache feature is using Core Data
/// seealso:
/// OGDataCacheManagerProtocol
@property (nonatomic, strong) id <OGDataCacheManagerProtocol> _Nonnull cacheManager;
@property (nonatomic) NSTimeInterval updateInterval;
- (Task * _Nonnull)fetchOGDataWithURLString:(NSString * _Nonnull)urlString completion:(void (^ _Nullable)(OpenGraphData * _Nonnull, NSError * _Nullable))completion;
- (void)deleteOGDataWithUrlString:(NSString * _Nonnull)urlString completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)deleteOGData:(OpenGraphData * _Nonnull)ogData completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)cancelLoading:(Task * _Nonnull)task shouldContinueDownloading:(BOOL)shouldContinueDownloading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;

/// Provides Image from cache or API
SWIFT_CLASS("_TtC7Threads15OGImageProvider")
@interface OGImageProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OGImageProvider * _Nonnull sharedInstance;)
+ (OGImageProvider * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (Task * _Nullable)loadImageWithURLString:(NSString * _Nonnull)urlString completion:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (void)clearMemoryCache;
- (void)clearAllCache;
- (void)cancelLoading:(Task * _Nonnull)task shouldContinueDownloading:(BOOL)shouldContinueDownloading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// OGP object for Objective-C
SWIFT_CLASS("_TtC7Threads13OpenGraphData")
@interface OpenGraphData : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable imageUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable pageDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable pageTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable pageType;
@property (nonatomic, readonly, copy) NSString * _Nullable siteName;
@property (nonatomic, readonly, copy) NSURL * _Nullable sourceUrl;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// OGP object downloader
SWIFT_CLASS("_TtC7Threads23OpenGraphDataDownloader")
@interface OpenGraphDataDownloader : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OpenGraphDataDownloader * _Nonnull sharedInstance;)
+ (OpenGraphDataDownloader * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (Task * _Nonnull)fetchOGDataWithURLString:(NSString * _Nonnull)urlString completion:(void (^ _Nullable)(OpenGraphData * _Nullable, NSError * _Nullable))completion;
- (void)cancelLoading:(Task * _Nonnull)task shouldContinueDownloading:(BOOL)shouldContinueDownloading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC7Threads10QuickReply")
@interface QuickReply : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSLayoutConstraint;
@class UIButton;
@class UINib;
@protocol QuickReplyCellDelegate;
@class UITraitCollection;

SWIFT_CLASS("_TtC7Threads14QuickReplyCell")
@interface QuickReplyCell : UICollectionViewCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QuickReplyCell * _Null_unspecified sizingCell;)
+ (QuickReplyCell * _Null_unspecified)sizingCell SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified cellWidth;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified actionButton;
+ (NSString * _Nonnull)cellIdentifier SWIFT_WARN_UNUSED_RESULT;
+ (UINib * _Nonnull)nib SWIFT_WARN_UNUSED_RESULT;
- (void)awakeFromNib;
- (void)configureWithQuickReply:(QuickReply * _Nonnull)quickReply delegate:(id <QuickReplyCellDelegate> _Nonnull)delegate;
- (void)setWidth:(CGFloat)width;
- (void)prepareForReuse;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7Threads22QuickReplyCellDelegate_")
@protocol QuickReplyCellDelegate
- (void)didSelectQuickReply:(QuickReply * _Nonnull)quickReply;
@end

enum Connection : NSInteger;

SWIFT_CLASS("_TtC7Threads16ReachabilityObjC")
@interface ReachabilityObjC : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ReachabilityObjC * _Nonnull shared;)
+ (ReachabilityObjC * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)startNotifying:(void (^ _Nonnull)(ReachabilityObjC * _Nonnull))listener;
+ (void)startNotifying;
+ (void)stopNotifying;
+ (void)whenReachable:(void (^ _Nonnull)(ReachabilityObjC * _Nonnull))reachable;
+ (void)whenUnreachable:(void (^ _Nonnull)(ReachabilityObjC * _Nonnull))unreachable;
+ (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
- (enum Connection)getConnection SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, Connection, open) {
  ConnectionUnavailable = 0,
  ConnectionWifi = 1,
  ConnectionCellular = 2,
};


SWIFT_CLASS("_TtC7Threads4Task")
@interface Task : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class THRMessage;

SWIFT_CLASS("_TtC7Threads16ThreadsServerAPI")
@interface ThreadsServerAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apiVersion;)
+ (NSString * _Nonnull)apiVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setServerWithBaseUrl:(NSURL * _Nonnull)baseUrl;
+ (void)markMessagesRead:(NSArray<THRMessage *> * _Nonnull)messages completion:(void (^ _Nonnull)(NSArray<THRMessage *> * _Nullable, NSError * _Nullable))completion;
+ (void)getHistoryMessagesWithClientId:(NSString * _Nonnull)clientId count:(NSInteger)count beforeMessage:(THRMessage * _Nullable)beforeMessage completion:(void (^ _Nonnull)(NSArray<THRMessage *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class THRAttributes;
@class NSAttributedString;

SWIFT_CLASS("_TtC7Threads23TransportMessagesParser")
@interface TransportMessagesParser : NSObject
+ (NSArray<QuickReply *> * _Nullable)getQuickRepliesFromDict:(NSDictionary<NSString *, id> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
+ (NSAttributedString * _Nonnull)getAttrStringFromMarkdown:(NSString * _Nonnull)string withAttributes:(THRAttributes * _Nonnull)attributes isOutgoing:(BOOL)isOutgoing SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
