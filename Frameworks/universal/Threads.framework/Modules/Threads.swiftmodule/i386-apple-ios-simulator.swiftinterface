// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.28.1 clang-1200.0.30.1)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Threads
import CoreData
import Foundation
import Threads.Private
import Swift
import SystemConfiguration
@_exported import Threads
import UIKit
import WebKit
import Threads.libcmark
import os.log
import os
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ThematicBreak : Threads.BaseNode {
  @objc deinit
}
extension ThematicBreak : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public class AttributedStringVisitor {
  public init(styler: Threads.Styler, options: Threads.DownOptions = .default)
  @objc deinit
}
extension AttributedStringVisitor : Threads.Visitor {
  public typealias Result = Foundation.NSMutableAttributedString
  public func visit(document node: Threads.Document) -> Foundation.NSMutableAttributedString
  public func visit(blockQuote node: Threads.BlockQuote) -> Foundation.NSMutableAttributedString
  public func visit(list node: Threads.List) -> Foundation.NSMutableAttributedString
  public func visit(item node: Threads.Item) -> Foundation.NSMutableAttributedString
  public func visit(codeBlock node: Threads.CodeBlock) -> Foundation.NSMutableAttributedString
  public func visit(htmlBlock node: Threads.HtmlBlock) -> Foundation.NSMutableAttributedString
  public func visit(customBlock node: Threads.CustomBlock) -> Foundation.NSMutableAttributedString
  public func visit(paragraph node: Threads.Paragraph) -> Foundation.NSMutableAttributedString
  public func visit(heading node: Threads.Heading) -> Foundation.NSMutableAttributedString
  public func visit(thematicBreak node: Threads.ThematicBreak) -> Foundation.NSMutableAttributedString
  public func visit(text node: Threads.Text) -> Foundation.NSMutableAttributedString
  public func visit(softBreak node: Threads.SoftBreak) -> Foundation.NSMutableAttributedString
  public func visit(lineBreak node: Threads.LineBreak) -> Foundation.NSMutableAttributedString
  public func visit(code node: Threads.Code) -> Foundation.NSMutableAttributedString
  public func visit(htmlInline node: Threads.HtmlInline) -> Foundation.NSMutableAttributedString
  public func visit(customInline node: Threads.CustomInline) -> Foundation.NSMutableAttributedString
  public func visit(emphasis node: Threads.Emphasis) -> Foundation.NSMutableAttributedString
  public func visit(strong node: Threads.Strong) -> Foundation.NSMutableAttributedString
  public func visit(link node: Threads.Link) -> Foundation.NSMutableAttributedString
  public func visit(image node: Threads.Image) -> Foundation.NSMutableAttributedString
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class List : Threads.BaseNode {
  public var listType: Threads.List.ListType {
    get
    set(value)
  }
  public var numberOfItems: Swift.Int {
    get
    set(value)
  }
  @objc deinit
}
extension List {
  public enum ListType : Swift.CustomDebugStringConvertible {
    case bullet
    case ordered(start: Swift.Int)
    public var debugDescription: Swift.String {
      get
    }
  }
}
extension List : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class OGDataProvider : ObjectiveC.NSObject {
  @objc(sharedInstance) public static var shared: Threads.OGDataProvider
  @objc final public var cacheManager: Threads.OGDataCacheManagerProtocol {
    @objc get
    @objc set(value)
  }
  @objc final public var updateInterval: Foundation.TimeInterval {
    @objc get
    @objc set(newValue)
  }
  @discardableResult
  @objc final public func fetchOGData(withURLString urlString: Swift.String, completion: ((Threads.OpenGraphData, Swift.Error?) -> Swift.Void)? = nil) -> Threads.Task
  @discardableResult
  @nonobjc final public func fetchOGData(urlString: Swift.String, completion: ((Threads.OpenGraph.Data, Swift.Error?) -> Swift.Void)? = nil) -> Threads.Task
  @objc final public func deleteOGData(urlString: Swift.String, completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc final public func deleteOGData(_ ogData: Threads.OpenGraphData, completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @nonobjc final public func deleteOGData(_ ogData: Threads.OpenGraph.Data, completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc final public func cancelLoading(_ task: Threads.Task, shouldContinueDownloading: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
public struct CodeBlockOptions {
  public var containerInset: CoreGraphics.CGFloat
  public init(containerInset: CoreGraphics.CGFloat = 8)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CustomBlock : Threads.BaseNode {
  public var literal: Swift.String? {
    get
  }
  @objc deinit
}
extension CustomBlock : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension String {
  public func toHTML(_ options: Threads.DownOptions = .default) throws -> Swift.String
}
public protocol DownGroffRenderable : Threads.DownRenderable {
  func toGroff(_ options: Threads.DownOptions, width: Swift.Int32) throws -> Swift.String
}
extension DownGroffRenderable {
  public func toGroff(_ options: Threads.DownOptions = .default, width: Swift.Int32 = 0) throws -> Swift.String
}
public struct DownGroffRenderer {
  public static func astToGroff(_ ast: Swift.UnsafeMutablePointer<Threads.cmark_node>, options: Threads.DownOptions = .default, width: Swift.Int32 = 0) throws -> Swift.String
}
public enum OpenGraph {
}
public struct Down : Threads.DownASTRenderable, Threads.DownHTMLRenderable, Threads.DownXMLRenderable, Threads.DownLaTeXRenderable, Threads.DownGroffRenderable, Threads.DownCommonMarkRenderable {
  public var markdownString: Swift.String
  public init(markdownString: Swift.String)
}
extension Down : Threads.DownAttributedStringRenderable {
}
public class DebugVisitor : Threads.Visitor {
  public init()
  public typealias Result = Swift.String
  public func visit(document node: Threads.Document) -> Swift.String
  public func visit(blockQuote node: Threads.BlockQuote) -> Swift.String
  public func visit(list node: Threads.List) -> Swift.String
  public func visit(item node: Threads.Item) -> Swift.String
  public func visit(codeBlock node: Threads.CodeBlock) -> Swift.String
  public func visit(htmlBlock node: Threads.HtmlBlock) -> Swift.String
  public func visit(customBlock node: Threads.CustomBlock) -> Swift.String
  public func visit(paragraph node: Threads.Paragraph) -> Swift.String
  public func visit(heading node: Threads.Heading) -> Swift.String
  public func visit(thematicBreak node: Threads.ThematicBreak) -> Swift.String
  public func visit(text node: Threads.Text) -> Swift.String
  public func visit(softBreak node: Threads.SoftBreak) -> Swift.String
  public func visit(lineBreak node: Threads.LineBreak) -> Swift.String
  public func visit(code node: Threads.Code) -> Swift.String
  public func visit(htmlInline node: Threads.HtmlInline) -> Swift.String
  public func visit(customInline node: Threads.CustomInline) -> Swift.String
  public func visit(emphasis node: Threads.Emphasis) -> Swift.String
  public func visit(strong node: Threads.Strong) -> Swift.String
  public func visit(link node: Threads.Link) -> Swift.String
  public func visit(image node: Threads.Image) -> Swift.String
  @objc deinit
}
public struct ThematicBreakOptions {
  public var thickness: CoreGraphics.CGFloat
  public var indentation: CoreGraphics.CGFloat
  public init(thickness: CoreGraphics.CGFloat = 1, indentation: CoreGraphics.CGFloat = 0)
}
public protocol Visitor {
  associatedtype Result
  func visit(document node: Threads.Document) -> Self.Result
  func visit(blockQuote node: Threads.BlockQuote) -> Self.Result
  func visit(list node: Threads.List) -> Self.Result
  func visit(item node: Threads.Item) -> Self.Result
  func visit(codeBlock node: Threads.CodeBlock) -> Self.Result
  func visit(htmlBlock node: Threads.HtmlBlock) -> Self.Result
  func visit(customBlock node: Threads.CustomBlock) -> Self.Result
  func visit(paragraph node: Threads.Paragraph) -> Self.Result
  func visit(heading node: Threads.Heading) -> Self.Result
  func visit(thematicBreak node: Threads.ThematicBreak) -> Self.Result
  func visit(text node: Threads.Text) -> Self.Result
  func visit(softBreak node: Threads.SoftBreak) -> Self.Result
  func visit(lineBreak node: Threads.LineBreak) -> Self.Result
  func visit(code node: Threads.Code) -> Self.Result
  func visit(htmlInline node: Threads.HtmlInline) -> Self.Result
  func visit(customInline node: Threads.CustomInline) -> Self.Result
  func visit(emphasis node: Threads.Emphasis) -> Self.Result
  func visit(strong node: Threads.Strong) -> Self.Result
  func visit(link node: Threads.Link) -> Self.Result
  func visit(image node: Threads.Image) -> Self.Result
  func visitChildren(of node: Threads.Node) -> [Self.Result]
}
extension Visitor {
  public func visitChildren(of node: Threads.Node) -> [Self.Result]
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Link : Threads.BaseNode {
  public var title: Swift.String? {
    get
  }
  public var url: Swift.String? {
    get
  }
  @objc deinit
}
extension Link : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SoftBreak : Threads.BaseNode {
  @objc deinit
}
extension SoftBreak : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class OpenGraphData : ObjectiveC.NSObject {
  @objc final public let imageUrl: Foundation.URL?
  @objc final public let pageDescription: Swift.String?
  @objc final public let pageTitle: Swift.String?
  @objc final public let pageType: Swift.String?
  @objc final public let siteName: Swift.String?
  @objc final public let sourceUrl: Foundation.URL?
  @objc final public let url: Foundation.URL?
  @objc deinit
  @objc override dynamic public init()
}
public protocol DownLaTeXRenderable : Threads.DownRenderable {
  func toLaTeX(_ options: Threads.DownOptions, width: Swift.Int32) throws -> Swift.String
}
extension DownLaTeXRenderable {
  public func toLaTeX(_ options: Threads.DownOptions = .default, width: Swift.Int32 = 0) throws -> Swift.String
}
public struct DownLaTeXRenderer {
  public static func astToLaTeX(_ ast: Swift.UnsafeMutablePointer<Threads.cmark_node>, options: Threads.DownOptions = .default, width: Swift.Int32 = 0) throws -> Swift.String
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Item : Threads.BaseNode {
  @objc deinit
}
extension Item : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class OGImageProvider : ObjectiveC.NSObject {
  @objc(sharedInstance) public static var shared: Threads.OGImageProvider
  @objc final public func loadImage(withURLString urlString: Swift.String, completion: ((UIKit.UIImage?, Swift.Error?) -> Swift.Void)? = nil) -> Threads.Task?
  @nonobjc final public func loadImage(urlString: Swift.String, completion: ((Threads.Result<UIKit.UIImage>) -> Swift.Void)? = nil) -> Threads.Task?
  @objc final public func clearMemoryCache()
  @objc final public func clearAllCache()
  @objc final public func cancelLoading(_ task: Threads.Task, shouldContinueDownloading: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CustomInline : Threads.BaseNode {
  public var literal: Swift.String? {
    get
  }
  @objc deinit
}
extension CustomInline : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CodeBlock : Threads.BaseNode {
  public var literal: Swift.String? {
    get
  }
  public var fenceInfo: Swift.String? {
    get
  }
  @objc deinit
}
extension CodeBlock : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class OGDataNoCacheManager : ObjectiveC.NSObject, Threads.OGDataCacheManagerProtocol {
  @objc final public var updateInterval: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc final public func fetchOrInsertOGCacheData(url: Swift.String, completion: @escaping (Threads.OGCacheData) -> ())
  @objc final public func fetchOGCacheData(url: Swift.String, completion: @escaping (Threads.OGCacheData?) -> ())
  @objc final public func updateIfNeeded(cache: Threads.OGCacheData)
  @objc final public func deleteOGCacheDate(cache: Threads.OGCacheData, completion: ((Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TransportMessagesParser : ObjectiveC.NSObject {
  @objc public class func getQuickRepliesFromDict(_ dict: Swift.Dictionary<Swift.String, Any>) -> Swift.Array<Threads.QuickReply>?
  @objc public class func getAttrString(fromMarkdown string: Swift.String, withAttributes attributes: Threads.THRAttributes, isOutgoing: Swift.Bool) -> Foundation.NSAttributedString
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Strong : Threads.BaseNode {
  @objc deinit
}
extension Strong : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LineBreak : Threads.BaseNode {
  @objc deinit
}
extension LineBreak : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BlockQuote : Threads.BaseNode {
  @objc deinit
}
extension BlockQuote : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public protocol DownASTRenderable : Threads.DownRenderable {
  func toAST(_ options: Threads.DownOptions) throws -> Swift.UnsafeMutablePointer<Threads.cmark_node>
}
extension DownASTRenderable {
  public func toAST(_ options: Threads.DownOptions = .default) throws -> Swift.UnsafeMutablePointer<Threads.cmark_node>
}
public struct DownASTRenderer {
  public static func stringToAST(_ string: Swift.String, options: Threads.DownOptions = .default) throws -> Swift.UnsafeMutablePointer<Threads.cmark_node>
}
public class ListItemParagraphStyler {
  public var indentation: CoreGraphics.CGFloat {
    get
  }
  public var trailingParagraphStyle: UIKit.NSParagraphStyle {
    get
  }
  public init(options: Threads.ListItemOptions, prefixFont: Threads.DownFont)
  public func leadingParagraphStyle(prefixWidth: CoreGraphics.CGFloat) -> UIKit.NSParagraphStyle
  @objc deinit
}
public protocol DownHTMLRenderable : Threads.DownRenderable {
  func toHTML(_ options: Threads.DownOptions) throws -> Swift.String
}
extension DownHTMLRenderable {
  public func toHTML(_ options: Threads.DownOptions = .default) throws -> Swift.String
}
public struct DownHTMLRenderer {
  public static func astToHTML(_ ast: Swift.UnsafeMutablePointer<Threads.cmark_node>, options: Threads.DownOptions = .default) throws -> Swift.String
}
public struct DownStylerConfiguration {
  public var fonts: Threads.FontCollection
  public var colors: Threads.ColorCollection
  public var paragraphStyles: Threads.ParagraphStyleCollection
  public var listItemOptions: Threads.ListItemOptions
  public var quoteStripeOptions: Threads.QuoteStripeOptions
  public var thematicBreakOptions: Threads.ThematicBreakOptions
  public var codeBlockOptions: Threads.CodeBlockOptions
  public init(fonts: Threads.FontCollection = StaticFontCollection(), colors: Threads.ColorCollection = StaticColorCollection(), paragraphStyles: Threads.ParagraphStyleCollection = StaticParagraphStyleCollection(), listItemOptions: Threads.ListItemOptions = ListItemOptions(), quoteStripeOptions: Threads.QuoteStripeOptions = QuoteStripeOptions(), thematicBreakOptions: Threads.ThematicBreakOptions = ThematicBreakOptions(), codeBlockOptions: Threads.CodeBlockOptions = CodeBlockOptions())
}
extension OpenGraph {
  public struct Data {
    public var imageUrl: Foundation.URL? {
      get
    }
    public var pageDescription: Swift.String? {
      get
    }
    public var pageTitle: Swift.String? {
      get
    }
    public var pageType: Swift.String? {
      get
    }
    public var siteName: Swift.String? {
      get
    }
    public var sourceUrl: Foundation.URL? {
      get
    }
    public var url: Foundation.URL? {
      get
    }
  }
}
extension OpenGraph.Data : Swift._ObjectiveCBridgeable {
  public typealias _ObjectiveCType = Threads.OpenGraphData
  public func _bridgeToObjectiveC() -> Threads.OpenGraphData
  public static func _forceBridgeFromObjectiveC(_ source: Threads.OpenGraphData, result: inout Threads.OpenGraph.Data?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Threads.OpenGraphData, result: inout Threads.OpenGraph.Data?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Threads.OpenGraphData?) -> Threads.OpenGraph.Data
}
public enum DownErrors : Swift.Error {
  case markdownToASTError
  case astRenderingError
  case htmlDataConversionError
  public static func == (a: Threads.DownErrors, b: Threads.DownErrors) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias DownFont = UIKit.UIFont
public protocol FontCollection {
  var heading1: Threads.DownFont { get set }
  var heading2: Threads.DownFont { get set }
  var heading3: Threads.DownFont { get set }
  var heading4: Threads.DownFont { get set }
  var heading5: Threads.DownFont { get set }
  var heading6: Threads.DownFont { get set }
  var body: Threads.DownFont { get set }
  var code: Threads.DownFont { get set }
  var listItemPrefix: Threads.DownFont { get set }
}
public struct StaticFontCollection : Threads.FontCollection {
  public var heading1: Threads.DownFont
  public var heading2: Threads.DownFont
  public var heading3: Threads.DownFont
  public var heading4: Threads.DownFont
  public var heading5: Threads.DownFont
  public var heading6: Threads.DownFont
  public var body: Threads.DownFont
  public var code: Threads.DownFont
  public var listItemPrefix: Threads.DownFont
  public init(heading1: Threads.DownFont = .boldSystemFont(ofSize: 28), heading2: Threads.DownFont = .boldSystemFont(ofSize: 24), heading3: Threads.DownFont = .boldSystemFont(ofSize: 20), heading4: Threads.DownFont = .boldSystemFont(ofSize: 20), heading5: Threads.DownFont = .boldSystemFont(ofSize: 20), heading6: Threads.DownFont = .boldSystemFont(ofSize: 20), body: Threads.DownFont = .systemFont(ofSize: 17), code: Threads.DownFont = DownFont(name: "menlo", size: 17) ?? .systemFont(ofSize: 17), listItemPrefix: Threads.DownFont = DownFont.monospacedDigitSystemFont(ofSize: 17, weight: .regular))
}
@_hasMissingDesignatedInitializers @objc final public class OpenGraphDataDownloader : ObjectiveC.NSObject {
  @objc(sharedInstance) public static var shared: Threads.OpenGraphDataDownloader
  @discardableResult
  @objc final public func fetchOGData(withURLString urlString: Swift.String, completion: ((Threads.OpenGraphData?, Swift.Error?) -> Swift.Void)? = nil) -> Threads.Task
  @discardableResult
  @nonobjc final public func fetchOGData(urlString: Swift.String, completion: ((Threads.OpenGraphDataDownloader.Result) -> Swift.Void)? = nil) -> Threads.Task
  @objc final public func cancelLoading(_ task: Threads.Task, shouldContinueDownloading: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
extension OpenGraphDataDownloader {
  public enum Error : Swift.Error {
    case createURLFailed(Swift.String)
    case createYoutubeRequestFailed(Swift.String)
  }
  public enum Result {
    case success(data: Threads.OpenGraph.Data, isExpired: Swift.Bool)
    case failure(error: Swift.Error, isExpired: Swift.Bool)
  }
}
extension OpenGraphDataDownloader.Result {
  public var isExpired: Swift.Bool {
    get
  }
  public var data: Threads.OpenGraph.Data? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
public typealias DownViewClosure = () -> ()
@objc open class DownView : WebKit.WKWebView {
  public init(frame: CoreGraphics.CGRect, markdownString: Swift.String, openLinksInBrowser: Swift.Bool = true, templateBundle: Foundation.Bundle? = nil, writableBundle: Swift.Bool = false, configuration: WebKit.WKWebViewConfiguration? = nil, options: Threads.DownOptions = .default, didLoadSuccessfully: Threads.DownViewClosure? = nil) throws
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  public func update(markdownString: Swift.String, options: Threads.DownOptions? = nil, didLoadSuccessfully: Threads.DownViewClosure? = nil) throws
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect, configuration: WebKit.WKWebViewConfiguration)
}
extension DownView : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class ReachabilityObjC : ObjectiveC.NSObject {
  @objc public static var shared: Threads.ReachabilityObjC
  @objc public static func startNotifying(_ listener: @escaping (Threads.ReachabilityObjC) -> ())
  @objc public static func startNotifying()
  @objc public static func stopNotifying()
  @objc public static func whenReachable(_ reachable: @escaping (Threads.ReachabilityObjC) -> ())
  @objc public static func whenUnreachable(_ unreachable: @escaping (Threads.ReachabilityObjC) -> ())
  @objc public static func isConnected() -> Swift.Bool
  @objc public func isConnected() -> Swift.Bool
  @objc public func getConnection() -> Threads.ReachabilityObjC.Connection
  @objc public enum Connection : Swift.Int, Swift.RawRepresentable {
    case unavailable
    case wifi
    case cellular
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Connection1 : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable
    case wifi
    case cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: Threads.ReachabilityObjC.Connection1, b: Threads.ReachabilityObjC.Connection1) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @objc deinit
}
@objc public protocol QuickReplyCellDelegate {
  @objc func didSelectQuickReply(_ quickReply: Threads.QuickReply)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class QuickReplyCell : UIKit.UICollectionViewCell {
  @objc public class var sizingCell: Threads.QuickReplyCell! {
    @objc get
  }
  @objc @IBOutlet weak public var cellWidth: UIKit.NSLayoutConstraint!
  @objc @IBOutlet weak public var actionButton: UIKit.UIButton!
  @objc public class func cellIdentifier() -> Swift.String
  @objc public class func nib() -> UIKit.UINib
  @objc override dynamic public func awakeFromNib()
  @objc public func configure(quickReply: Threads.QuickReply, delegate: Threads.QuickReplyCellDelegate)
  @objc public func setWidth(_ width: CoreGraphics.CGFloat)
  @objc override dynamic public func prepareForReuse()
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public typealias TextView = UIKit.UITextView
@objc @_hasMissingDesignatedInitializers open class DownTextView : Threads.TextView {
  open var styler: Threads.Styler
  @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set(value)
  }
  public convenience init(frame: CoreGraphics.CGRect, styler: Threads.Styler = DownStyler())
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  open func render() throws
  @objc deinit
  @available(iOS 7.0, *)
  @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
}
public typealias DownColor = UIKit.UIColor
public protocol ColorCollection {
  var heading1: Threads.DownColor { get set }
  var heading2: Threads.DownColor { get set }
  var heading3: Threads.DownColor { get set }
  var heading4: Threads.DownColor { get set }
  var heading5: Threads.DownColor { get set }
  var heading6: Threads.DownColor { get set }
  var body: Threads.DownColor { get set }
  var code: Threads.DownColor { get set }
  var link: Threads.DownColor { get set }
  var quote: Threads.DownColor { get set }
  var quoteStripe: Threads.DownColor { get set }
  var thematicBreak: Threads.DownColor { get set }
  var listItemPrefix: Threads.DownColor { get set }
  var codeBlockBackground: Threads.DownColor { get set }
}
public struct StaticColorCollection : Threads.ColorCollection {
  public var heading1: Threads.DownColor
  public var heading2: Threads.DownColor
  public var heading3: Threads.DownColor
  public var heading4: Threads.DownColor
  public var heading5: Threads.DownColor
  public var heading6: Threads.DownColor
  public var body: Threads.DownColor
  public var code: Threads.DownColor
  public var link: Threads.DownColor
  public var quote: Threads.DownColor
  public var quoteStripe: Threads.DownColor
  public var thematicBreak: Threads.DownColor
  public var listItemPrefix: Threads.DownColor
  public var codeBlockBackground: Threads.DownColor
  public init(heading1: Threads.DownColor = .black, heading2: Threads.DownColor = .black, heading3: Threads.DownColor = .black, heading4: Threads.DownColor = .black, heading5: Threads.DownColor = .black, heading6: Threads.DownColor = .black, body: Threads.DownColor = .black, code: Threads.DownColor = .black, link: Threads.DownColor = .blue, quote: Threads.DownColor = .darkGray, quoteStripe: Threads.DownColor = .darkGray, thematicBreak: Threads.DownColor = .init(white: 0.9, alpha: 1), listItemPrefix: Threads.DownColor = .lightGray, codeBlockBackground: Threads.DownColor = .init(red: 0.96, green: 0.97, blue: 0.98, alpha: 1))
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Code : Threads.BaseNode {
  public var literal: Swift.String? {
    get
  }
  @objc deinit
}
extension Code : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Paragraph : Threads.BaseNode {
  @objc deinit
}
extension Paragraph : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class OGCacheData : ObjectiveC.NSObject {
  @nonobjc final public let ogData: Threads.OpenGraph.Data
  @objc final public let createDate: Foundation.Date?
  @objc final public let updateDate: Foundation.Date?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Document : Threads.BaseNode {
  @objc deinit
  @discardableResult
  public func accept<T>(_ visitor: T) -> T.Result where T : Threads.Visitor
}
extension Document : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public protocol DownXMLRenderable : Threads.DownRenderable {
  func toXML(_ options: Threads.DownOptions) throws -> Swift.String
}
extension DownXMLRenderable {
  public func toXML(_ options: Threads.DownOptions = .default) throws -> Swift.String
}
public struct DownXMLRenderer {
  public static func astToXML(_ ast: Swift.UnsafeMutablePointer<Threads.cmark_node>, options: Threads.DownOptions = .default) throws -> Swift.String
}
@objc public protocol OGDataCacheManagerProtocol : ObjectiveC.NSObjectProtocol {
  @objc var updateInterval: Foundation.TimeInterval { get set }
  @objc func fetchOrInsertOGCacheData(url: Swift.String, completion: @escaping (Threads.OGCacheData) -> ())
  @objc func fetchOGCacheData(url: Swift.String, completion: @escaping (Threads.OGCacheData?) -> ())
  @objc func updateIfNeeded(cache: Threads.OGCacheData)
  @objc func deleteOGCacheDate(cache: Threads.OGCacheData, completion: ((Swift.Error?) -> Swift.Void)?)
}
public struct DownOptions : Swift.OptionSet {
  public let rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static var `default`: Threads.DownOptions
  public static var sourcePos: Threads.DownOptions
  public static var hardBreaks: Threads.DownOptions
  public static var safe: Threads.DownOptions
  public static var unsafe: Threads.DownOptions
  public static var normalize: Threads.DownOptions
  public static var validateUTF8: Threads.DownOptions
  public static var smart: Threads.DownOptions
  public static var smartUnsafe: Threads.DownOptions
  public typealias Element = Threads.DownOptions
  public typealias ArrayLiteralElement = Threads.DownOptions
  public typealias RawValue = Swift.Int32
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class QuickReply : ObjectiveC.NSObject {
  @objc final public let text: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Heading : Threads.BaseNode {
  public var headingLevel: Swift.Int {
    get
  }
  @objc deinit
}
extension Heading : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ThreadsServerAPI : ObjectiveC.NSObject {
  @objc public static var apiVersion: Swift.String
  public typealias Completion<T> = (T?, Swift.Error?) -> Swift.Void
  public typealias HistoryCompletion = Threads.ThreadsServerAPI.Completion<Swift.Array<Threads.THRMessage>>
  public typealias MessagesReadCompletion = Threads.ThreadsServerAPI.Completion<Swift.Array<Threads.THRMessage>>
  @objc public static func setServer(baseUrl: Foundation.URL)
  @objc public static func markMessagesRead(_ messages: Swift.Array<Threads.THRMessage>, completion: @escaping Threads.ThreadsServerAPI.MessagesReadCompletion)
  @objc public static func getHistoryMessages(clientId: Swift.String, count: Swift.Int, beforeMessage: Threads.THRMessage?, completion: @escaping Threads.ThreadsServerAPI.HistoryCompletion)
  @objc deinit
  @objc override dynamic public init()
}
public struct ListItemOptions {
  public var maxPrefixDigits: Swift.UInt
  public var spacingAfterPrefix: CoreGraphics.CGFloat
  public var spacingAbove: CoreGraphics.CGFloat
  public var spacingBelow: CoreGraphics.CGFloat
  public init(maxPrefixDigits: Swift.UInt = 2, spacingAfterPrefix: CoreGraphics.CGFloat = 8, spacingAbove: CoreGraphics.CGFloat = 4, spacingBelow: CoreGraphics.CGFloat = 8)
}
public protocol Node {
  var cmarkNode: Threads.CMarkNode { get }
  var children: [Threads.Node] { get }
}
extension Node {
  public var hasSuccessor: Swift.Bool {
    get
  }
}
public typealias CMarkNode = Swift.UnsafeMutablePointer<Threads.cmark_node>
extension UnsafeMutablePointer where Pointee == Threads.cmark_node {
  public func wrap() -> Threads.Node?
  public var parent: Threads.CMarkNode? {
    get
  }
  public var type: Threads.cmark_node_type {
    get
  }
  public var literal: Swift.String? {
    get
  }
  public var fenceInfo: Swift.String? {
    get
  }
  public var headingLevel: Swift.Int {
    get
  }
  public var listType: Threads.cmark_list_type {
    get
  }
  public var listStart: Swift.Int {
    get
  }
  public var url: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
}
public struct QuoteStripeOptions {
  public var thickness: CoreGraphics.CGFloat
  public var spacingAfter: CoreGraphics.CGFloat
  public init(thickness: CoreGraphics.CGFloat = 2, spacingAfter: CoreGraphics.CGFloat = 8)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Emphasis : Threads.BaseNode {
  @objc deinit
}
extension Emphasis : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension Double {
  public var minutes: Foundation.TimeInterval {
    get
  }
  public var hours: Foundation.TimeInterval {
    get
  }
  public var days: Foundation.TimeInterval {
    get
  }
  public var weeks: Foundation.TimeInterval {
    get
  }
  public var months: Foundation.TimeInterval {
    get
  }
  public var years: Foundation.TimeInterval {
    get
  }
}
extension NSNumber {
  @objc dynamic public class func minutes(_ time: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc dynamic public class func hours(_ time: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc dynamic public class func days(_ time: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc dynamic public class func weeks(_ time: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc dynamic public class func months(_ time: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc dynamic public class func years(_ time: Foundation.TimeInterval) -> Foundation.TimeInterval
}
@objc @_inheritsConvenienceInitializers public class DownLayoutManager : UIKit.NSLayoutManager {
  @objc override dynamic public func drawGlyphs(forGlyphRange glyphsToShow: Foundation.NSRange, at origin: CoreGraphics.CGPoint)
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_hasMissingDesignatedInitializers public class BaseNode : Threads.Node {
  final public let cmarkNode: Threads.CMarkNode
  public var children: [Threads.Node] {
    get
  }
  public var nestDepth: Swift.Int {
    get
  }
  @objc deinit
}
public protocol ParagraphStyleCollection {
  var heading1: UIKit.NSParagraphStyle { get set }
  var heading2: UIKit.NSParagraphStyle { get set }
  var heading3: UIKit.NSParagraphStyle { get set }
  var heading4: UIKit.NSParagraphStyle { get set }
  var heading5: UIKit.NSParagraphStyle { get set }
  var heading6: UIKit.NSParagraphStyle { get set }
  var body: UIKit.NSParagraphStyle { get set }
  var code: UIKit.NSParagraphStyle { get set }
}
public struct StaticParagraphStyleCollection : Threads.ParagraphStyleCollection {
  public var heading1: UIKit.NSParagraphStyle
  public var heading2: UIKit.NSParagraphStyle
  public var heading3: UIKit.NSParagraphStyle
  public var heading4: UIKit.NSParagraphStyle
  public var heading5: UIKit.NSParagraphStyle
  public var heading6: UIKit.NSParagraphStyle
  public var body: UIKit.NSParagraphStyle
  public var code: UIKit.NSParagraphStyle
  public init()
}
public protocol DownCommonMarkRenderable : Threads.DownRenderable {
  func toCommonMark(_ options: Threads.DownOptions, width: Swift.Int32) throws -> Swift.String
}
extension DownCommonMarkRenderable {
  public func toCommonMark(_ options: Threads.DownOptions = .default, width: Swift.Int32 = 0) throws -> Swift.String
}
public struct DownCommonMarkRenderer {
  public static func astToCommonMark(_ ast: Swift.UnsafeMutablePointer<Threads.cmark_node>, options: Threads.DownOptions = .default, width: Swift.Int32 = 0) throws -> Swift.String
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HtmlBlock : Threads.BaseNode {
  public var literal: Swift.String? {
    get
  }
  @objc deinit
}
extension HtmlBlock : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Image : Threads.BaseNode {
  public var title: Swift.String? {
    get
  }
  public var url: Swift.String? {
    get
  }
  @objc deinit
}
extension Image : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension String {
  public func md5() -> Swift.String
}
public protocol Styler {
  func style(document str: Foundation.NSMutableAttributedString)
  func style(blockQuote str: Foundation.NSMutableAttributedString, nestDepth: Swift.Int)
  func style(list str: Foundation.NSMutableAttributedString, nestDepth: Swift.Int)
  func style(listItemPrefix str: Foundation.NSMutableAttributedString)
  func style(item str: Foundation.NSMutableAttributedString, prefixLength: Swift.Int)
  func style(codeBlock str: Foundation.NSMutableAttributedString, fenceInfo: Swift.String?)
  func style(htmlBlock str: Foundation.NSMutableAttributedString)
  func style(customBlock str: Foundation.NSMutableAttributedString)
  func style(paragraph str: Foundation.NSMutableAttributedString)
  func style(heading str: Foundation.NSMutableAttributedString, level: Swift.Int)
  func style(thematicBreak str: Foundation.NSMutableAttributedString)
  func style(text str: Foundation.NSMutableAttributedString)
  func style(softBreak str: Foundation.NSMutableAttributedString)
  func style(lineBreak str: Foundation.NSMutableAttributedString)
  func style(code str: Foundation.NSMutableAttributedString)
  func style(htmlInline str: Foundation.NSMutableAttributedString)
  func style(customInline str: Foundation.NSMutableAttributedString)
  func style(emphasis str: Foundation.NSMutableAttributedString)
  func style(strong str: Foundation.NSMutableAttributedString)
  func style(link str: Foundation.NSMutableAttributedString, title: Swift.String?, url: Swift.String?)
  func style(image str: Foundation.NSMutableAttributedString, title: Swift.String?, url: Swift.String?)
}
public protocol DownAttributedStringRenderable : Threads.DownASTRenderable, Threads.DownHTMLRenderable {
  func toAttributedString(_ options: Threads.DownOptions, stylesheet: Swift.String?) throws -> Foundation.NSAttributedString
  func toAttributedString(_ options: Threads.DownOptions, styler: Threads.Styler) throws -> Foundation.NSAttributedString
}
extension DownAttributedStringRenderable {
  public func toAttributedString(_ options: Threads.DownOptions = .default, stylesheet: Swift.String? = nil) throws -> Foundation.NSAttributedString
  public func toAttributedString(_ options: Threads.DownOptions = .default, styler: Threads.Styler) throws -> Foundation.NSAttributedString
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HtmlInline : Threads.BaseNode {
  public var literal: Swift.String? {
    get
  }
  @objc deinit
}
extension HtmlInline : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum URLEmbeddedViewError : Swift.Error {
  case invalidURLString(Swift.String)
}
public enum Result<T> {
  case success(T)
  case failure(Swift.Error)
  public var value: T? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class Task : ObjectiveC.NSObject {
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public var ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static var reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (Threads.Reachability) -> ()
  public typealias NetworkUnreachable = (Threads.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable
    case reachableViaWiFi
    case reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: Threads.Reachability.NetworkStatus, b: Threads.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable
    case wifi
    case cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: Threads.Reachability.Connection, b: Threads.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: Threads.Reachability.NetworkReachable?
  public var whenUnreachable: Threads.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: Threads.Reachability.Connection {
    get
  }
  public var connection: Threads.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  public convenience init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  public convenience init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public protocol DownRenderable {
  var markdownString: Swift.String { get set }
}
extension URLRequest {
  public enum HTTPMethod : Swift.String {
    case GET
    case PUT
    case POST
    case DELETE
    case HEAD
    case OPTIONS
    case TRACE
    case CONNECT
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var method: Foundation.URLRequest.HTTPMethod? {
    get
    set(newValue)
  }
}
@objc @_inheritsConvenienceInitializers public class DownDebugLayoutManager : Threads.DownLayoutManager {
  @objc override dynamic public func drawGlyphs(forGlyphRange glyphsToShow: Foundation.NSRange, at origin: CoreGraphics.CGPoint)
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
open class DownStyler : Threads.Styler {
  final public let fonts: Threads.FontCollection
  final public let colors: Threads.ColorCollection
  final public let paragraphStyles: Threads.ParagraphStyleCollection
  final public let quoteStripeOptions: Threads.QuoteStripeOptions
  final public let thematicBreakOptions: Threads.ThematicBreakOptions
  final public let codeBlockOptions: Threads.CodeBlockOptions
  public init(configuration: Threads.DownStylerConfiguration = DownStylerConfiguration())
  open func style(document str: Foundation.NSMutableAttributedString)
  open func style(blockQuote str: Foundation.NSMutableAttributedString, nestDepth: Swift.Int)
  open func style(list str: Foundation.NSMutableAttributedString, nestDepth: Swift.Int)
  open func style(listItemPrefix str: Foundation.NSMutableAttributedString)
  open func style(item str: Foundation.NSMutableAttributedString, prefixLength: Swift.Int)
  open func style(codeBlock str: Foundation.NSMutableAttributedString, fenceInfo: Swift.String?)
  open func style(htmlBlock str: Foundation.NSMutableAttributedString)
  open func style(customBlock str: Foundation.NSMutableAttributedString)
  open func style(paragraph str: Foundation.NSMutableAttributedString)
  open func style(heading str: Foundation.NSMutableAttributedString, level: Swift.Int)
  open func style(thematicBreak str: Foundation.NSMutableAttributedString)
  open func style(text str: Foundation.NSMutableAttributedString)
  open func style(softBreak str: Foundation.NSMutableAttributedString)
  open func style(lineBreak str: Foundation.NSMutableAttributedString)
  open func style(code str: Foundation.NSMutableAttributedString)
  open func style(htmlInline str: Foundation.NSMutableAttributedString)
  open func style(customInline str: Foundation.NSMutableAttributedString)
  open func style(emphasis str: Foundation.NSMutableAttributedString)
  open func style(strong str: Foundation.NSMutableAttributedString)
  open func style(link str: Foundation.NSMutableAttributedString, title: Swift.String?, url: Swift.String?)
  open func style(image str: Foundation.NSMutableAttributedString, title: Swift.String?, url: Swift.String?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class DownDebugTextView : Threads.DownTextView {
  public init(frame: CoreGraphics.CGRect, styler: Threads.Styler = DownStyler())
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias DownFontDescriptor = UIKit.UIFontDescriptor
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Text : Threads.BaseNode {
  public var literal: Swift.String? {
    get
  }
  @objc deinit
}
extension Text : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
