// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Threads
import CommonCrypto
import CoreData
import Foundation
import MobileCoreServices
import Photos
import PhotosUI
import Swift
import SystemConfiguration
@_exported import Threads
import UIKit.UIImage
import UIKit
import WebKit
import _Concurrency
import os
@_inheritsConvenienceInitializers @objc(THRDownloadDataRequest) final public class DownloadDataRequest : ObjectiveC.NSObject {
  @objc deinit
  @objc(downloadAndSaveFileFromURL:completionHandler:progressHandler:) final public func downloadAndSaveFile(url: Foundation.URL, completionHandler: @escaping (Foundation.URL?, Swift.Error?) -> Swift.Void, progressHandler: ((CoreGraphics.CGFloat) -> Swift.Void)? = nil)
  @objc(downloadImageFromURL:completionHandler:) final public func downloadImage(url: Foundation.URL, completionHandler: @escaping (UIKit.UIImage?, Swift.Error?) -> Swift.Void)
  @objc(downloadDataFromURL:completionHandler:progressHandler:) final public func downloadData(url: Foundation.URL, completionHandler: @escaping (Foundation.NSData?, Foundation.NSError?) -> Swift.Void, progressHandler: ((CoreGraphics.CGFloat) -> Swift.Void)? = nil)
  @objc final public func cancelDownload()
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class Localization : ObjectiveC.NSObject {
  @objc public class func localize(key: Swift.String, value: Swift.String) -> Swift.String
  @objc public class func localize(key: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class LoadingLabel : UIKit.UILabel {
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func stopAnimatation()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func fadeIn(duration: CoreGraphics.CGFloat = 1.0)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func fadeOut(duration: CoreGraphics.CGFloat = 1.0, completion: @escaping () -> Swift.Void)
}
@objc public enum SearchScope : Swift.UInt {
  case all
  case images
  case files
  case count
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public enum THRAuthMethod : Swift.Int {
  case headers
  case cookies
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class THRClientInfo : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public init(clientId: Swift.String)
  @objc final public let clientId: Swift.String
  @objc public var name: Swift.String?
  @objc public var data: Swift.String?
  @objc public var appMarker: Swift.String?
  @objc public var signature: Swift.String?
  @objc public var authToken: Swift.String?
  @objc public var authSchema: Swift.String?
  @objc(authMethod) public var authMethod: THRAuthMethod
  @objc public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc public enum SearchState : Swift.UInt {
  case idle
  case loading
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public protocol LoadingChatViewControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func checkLoadingError()
  @objc func repeatInitChat()
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class LoadingChatViewController : UIKit.UIViewController {
  @objc dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: LoadingChatViewControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) final public var error: Swift.Error? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func loadView()
  @objc @_Concurrency.MainActor(unsafe) final public func startTimer()
  @objc @_Concurrency.MainActor(unsafe) final public func stopTimer()
  @objc deinit
}
@objc public protocol THRJSQMessageAvatarImageDataSource : ObjectiveC.NSObjectProtocol {
  @objc var avatarImage: UIKit.UIImage? { get set }
  @objc var avatarHighlightedImage: UIKit.UIImage? { get set }
  @objc var avatarPlaceholderImage: UIKit.UIImage { get }
}
@_inheritsConvenienceInitializers @objc public class ImageAsset : ObjectiveC.NSObject {
  @objc public static var searchButton: UIKit.UIImage {
    @objc get
  }
  @objc public static var backButton: UIKit.UIImage {
    @objc get
  }
  @objc public static var bubbleMin: UIKit.UIImage {
    @objc get
  }
  @objc public static var bubbleStroked: UIKit.UIImage {
    @objc get
  }
  @objc public static var chatPlaceholder: UIKit.UIImage {
    @objc get
  }
  @objc public static var checkmark: UIKit.UIImage {
    @objc get
  }
  @objc public static var closeButton: UIKit.UIImage {
    @objc get
  }
  @objc public static var defaultProfile: UIKit.UIImage {
    @objc get
  }
  @objc public static var doubleCheckmark: UIKit.UIImage {
    @objc get
  }
  @objc public static var emptyCheckmark: UIKit.UIImage {
    @objc get
  }
  @objc public static var forward: UIKit.UIImage {
    @objc get
  }
  @objc public static var icClip: UIKit.UIImage {
    @objc get
  }
  @objc public static var icDislikeEmpty: UIKit.UIImage {
    @objc get
  }
  @objc public static var icDislikeFull: UIKit.UIImage {
    @objc get
  }
  @objc public static var icEditied: UIKit.UIImage {
    @objc get
  }
  @objc public static var icFile: UIKit.UIImage {
    @objc get
  }
  @objc public static var icKeyboardHide: UIKit.UIImage {
    @objc get
  }
  @objc public static var icKeyboardShow: UIKit.UIImage {
    @objc get
  }
  @objc public static var icLikeEmpty: UIKit.UIImage {
    @objc get
  }
  @objc public static var icLikeFull: UIKit.UIImage {
    @objc get
  }
  @objc public static var icStarRatingEmpty: UIKit.UIImage {
    @objc get
  }
  @objc public static var icStarRatingFull: UIKit.UIImage {
    @objc get
  }
  @objc public static var notFound: UIKit.UIImage {
    @objc get
  }
  @objc public static var pendingMark: UIKit.UIImage {
    @objc get
  }
  @objc public static var prechatError: UIKit.UIImage {
    @objc get
  }
  @objc public static var scheduleAlert: UIKit.UIImage {
    @objc get
  }
  @objc public static var scrollDownButton: UIKit.UIImage {
    @objc get
  }
  @objc public static var sentCheckmark: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqAlert: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqArrowDown: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqArrowUp: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqBubbleMin: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqBubbleStroked: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqClip: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqFile: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqGroup2: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqGroup4: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqLoading: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqMicrophone: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqPause: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqPlay: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqPlay1: UIKit.UIImage {
    @objc get
  }
  @objc public static var thrjsqShield: UIKit.UIImage {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct MultipartFormData {
  public init(file name: Swift.String, data: Foundation.Data)
  public let boundary: Swift.String
  public var httpContentTypeHeadeValue: Swift.String {
    get
  }
  public var httpBody: Foundation.Data {
    get
  }
  public mutating func add(key: Swift.String, value: Swift.String)
  public mutating func add(key: Swift.String, fileName: Swift.String, fileMimeType: Swift.String, fileData: Foundation.Data)
}
@objc @objcMembers public class THRRoutingParams : ObjectiveC.NSObject {
  @objc public init(priority: Swift.Int, skillId: Swift.Int, expiredAt: Swift.String?)
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc deinit
}
@objc public protocol MessagesLoadEarlierHeaderViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc(headerView:didPressLoadButton:) func headerView(headerView: MessagesLoadEarlierHeaderView, sender: UIKit.UIButton)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class MessagesLoadEarlierHeaderView : UIKit.UICollectionReusableView {
  @objc @_Concurrency.MainActor(unsafe) public static let kTHRJSQMessagesLoadEarlierHeaderViewHeight: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public static let headerReuseIdentifier: Swift.String
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: MessagesLoadEarlierHeaderViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var loadButton: UIKit.UIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class THRHistoryLoadingOptions : ObjectiveC.NSObject {
  @objc public var firstLoading: Swift.Bool
  @objc public var keepContentOffset: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class UnselectableTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var selectedTextRange: UIKit.UITextRange? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SocketSettings : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var sendIntervalSec: Swift.Int
  @objc public var resendIntervalSec: Swift.Double
  @objc public var resendPingIntervalSec: Swift.Double
  @objc public var connectTimeoutSec: Swift.Double
  @objc public var readTimeoutSec: Swift.Double
  @objc public var writeTimeoutSec: Swift.Double
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HttpSettings : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var connectTimeoutSec: Swift.Double
  @objc public var downloadTimeoutSec: Swift.Double
  @objc public var uploadTimeoutSec: Swift.Double
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class THRRequestConfigs : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var socket: SocketSettings
  @objc public var http: HttpSettings
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(THRUploadDataRequest) final public class UploadDataRequest : ObjectiveC.NSObject {
  @objc final public func upload(file name: Swift.String, with data: Foundation.Data, completionHandler: @escaping (Swift.String?, Swift.String?, Swift.Error?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class THRControls : ObjectiveC.NSObject {
  @objc final public var sendButton: UIKit.UIButton?
  @objc final public var attachButton: UIKit.UIButton?
  @objc override dynamic public init()
  @objc deinit
}
@objc(THRCert) final public class THRCert : ObjectiveC.NSObject {
  @objc public init(contentsOf url: Foundation.URL?)
  @objc convenience public init(contentsOfFile fileName: Swift.String)
  @objc deinit
}
@objc public protocol QuickReplyCellDelegate {
  @objc func didSelectQuickReply(_ quickReply: QuickReply)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class QuickReplyCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public class var sizingCell: QuickReplyCell {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var colView: UIKit.UICollectionView?
  @objc @_Concurrency.MainActor(unsafe) public class func cellIdentifier() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public func configure(quickReply: QuickReply, delegate: QuickReplyCellDelegate)
  @objc @_Concurrency.MainActor(unsafe) public func setWidth(_: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func getSize(width: CoreGraphics.CGFloat) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@objc extension Foundation.NSError {
  @objc dynamic public class func applicationError(with description: Swift.String) -> Foundation.NSError
  @objc dynamic public class func applicationError(with code: Swift.Int, and description: Swift.String) -> Foundation.NSError
}
@objc public protocol ThreadsPreloadView {
  @objc func startAnimation()
  @objc func stopAnimation()
  @objc func getView() -> UIKit.UIView!
}
@objc public protocol ThreadsDelegate {
  @objc func threads(_ threads: Threads, didReceiveError error: Swift.Error)
  @objc func threads(_ threads: Threads, unreadMessagesCount: Swift.UInt)
  @objc func threads(_ threads: Threads, didChangeDeviceAddress deviceAddress: Swift.String)
  @objc optional func threads(_ threads: Threads, allowOpenUrl: Foundation.URL) -> Swift.Bool
  @objc optional func customPreloadView() -> ThreadsPreloadView!
  @objc optional func threads(_ threads: Threads, didReceiveMessage message: THRMessageInfo)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class Threads : ObjectiveC.NSObject {
  @objc final public var apiVersion: THRAPIVersion {
    @objc get
    @objc set
  }
  @objc final public var isClientIdEncrypted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var isShowsNetworkActivity: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var clientId: Swift.String? {
    @objc get
  }
  @objc final public var clientName: Swift.String? {
    @objc get
  }
  @objc final public var appMarker: Swift.String? {
    @objc get
  }
  @objc final public var clientSignature: Swift.String? {
    @objc get
  }
  @objc final public var clientAuthToken: Swift.String? {
    @objc get
  }
  @objc final public var clientAuthSchema: Swift.String? {
    @objc get
  }
  @objc final public var isClientSet: Swift.Bool {
    @objc get
  }
  @objc final public var data: Swift.String? {
    @objc get
  }
  @objc final public var attributes: THRAttributes {
    @objc get
  }
  @objc final public var controls: THRControls {
    @objc get
  }
  @objc final public var restURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc final public var dataStoreURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc final public var lastActivitySeconds: Foundation.TimeInterval {
    @objc get
  }
  @objc final public var keepSocketActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var disableUserInput: Swift.Bool {
    @objc get
    @objc set
  }
  weak final public var delegate: ThreadsDelegate? {
    get
    set
  }
  final public var requestConfig: THRRequestConfigs {
    get
  }
  @objc public static func threads() -> Threads
  @objc final public func configureTransportProtocol(with delegate: ThreadsDelegate?, webSocketURL: Foundation.URL, providerUid: Swift.String, restURL: Foundation.URL, dataStoreURL: Foundation.URL)
  @objc final public func registerApplicationForRemoteNotificationsStandartOptions(authorizationStatusDenied: (() -> Swift.Void)?, completionHandler: @escaping ((_ deviceToken: Foundation.Data?) -> Swift.Void))
  @objc final public func applicationDidRegisterForRemoteNotifications(withDeviceToken deviceToken: Foundation.Data)
  @objc final public func updateLocation(latitude: Foundation.NSNumber, longitude: Foundation.NSNumber)
  @objc final public func setClientInfo(_ clientInfo: THRClientInfo)
  @objc final public func updateClientInfo(_ clientInfo: THRClientInfo)
  @objc final public func logout()
  @objc final public func logout(withClientId clientId: Swift.String)
  @objc final public func handlePushNotificationUserInfo(_ userInfo: [Swift.AnyHashable : Any])
  @objc final public func version() -> Foundation.NSString
  @objc final public func unreadMessagesCount() -> Swift.UInt
  @objc final public func clearCachedFiles()
  @objc final public func isThreadsOriginPushUserInfo(_ userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc final public func getAppMarker(fromPushUserInfo userInfo: [Swift.AnyHashable : Any]) -> Swift.String?
  @objc final public func sendMessage(withText: Swift.String, completion: ((_ error: Swift.Error?) -> Swift.Void)?)
  @objc final public func registerUser(with clientInfo: THRClientInfo, messageWithText text: Swift.String? = nil)
  @objc final public func sendMessage(with image: UIKit.UIImage, completion: ((_ error: Swift.Error?) -> Swift.Void)?)
  @objc final public func chatViewController(with attributes: THRAttributes) -> UIKit.UIViewController
  @objc final public func chatViewController(with attributes: THRAttributes, completionHandler: ((_ error: Swift.Error?) -> Swift.Void)?) -> UIKit.UIViewController
  @objc final public func chatViewController(with attributes: THRAttributes, pushUserInfo: [Swift.AnyHashable : Any], completionHandler: ((_ error: Swift.Error?) -> Swift.Void)?) -> UIKit.UIViewController
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class EDNAPreloadView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame _: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func startAnimating()
  @objc @_Concurrency.MainActor(unsafe) public func stopAnimating()
  @objc deinit
}
@objc @objcMembers public class THRSettingsShadow : ObjectiveC.NSObject {
  @objc required public init(opacity: CoreGraphics.CGFloat = 1.0, radius: CoreGraphics.CGFloat = 2.0, offset: CoreGraphics.CGSize = CGSize(width: 2.0, height: 2.0), color: UIKit.UIColor = .black)
  @objc final public let opacity: CoreGraphics.CGFloat
  @objc final public let radius: CoreGraphics.CGFloat
  @objc final public let offset: CoreGraphics.CGSize
  @objc final public let color: UIKit.UIColor
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ColorAsset : ObjectiveC.NSObject {
  @objc public static var accent: UIKit.UIColor {
    @objc get
  }
  @objc public static var darkTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var labelColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var lightTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var linkColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var opaqueSeparatorColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var placeholderTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var quaternaryLabelColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var quaternarySystemFillColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var secondaryLabelColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var secondarySystemBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var secondarySystemFillColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var secondarySystemGroupedBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var separatorColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemBlueColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemFillColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemGray2Color: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemGray3Color: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemGray4Color: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemGray5Color: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemGray6Color: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemGrayColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemGreenColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemGroupedBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemIndigoColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemOrangeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemPinkColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemPurpleColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemRedColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemTealColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemYellowColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var tertiaryLabelColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var tertiarySystemBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var tertiarySystemFillColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var tertiarySystemGroupedBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrAttachButtonColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrAttachButtonHighlightColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrDeletedMessageTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrEmptyImageColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrFailedBubbleColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrFindMoreMessageTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrFindedMessageHeaderBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrFindedMessageHeaderTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingBubbleColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingBubbleLinkColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingBubbleTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingFileIconTintColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingMediaTimeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingQuoteAuthorColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingQuoteFilesizeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingQuoteMessageColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingQuoteSeparatorColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingQuoteTimeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrIncomingTimeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrLikeLabelOnStarColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrLikeLabelUnderStarColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrLikeRatingColorCompleted: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrLikeRatingColorDisabled: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrLikeRatingColorEnabled: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingBubbleColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingBubbleLinkColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingBubbleTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingDeliveredStatusColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingFileIconTintColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingMediaDeliveredStatusColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingMediaPendingStatusColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingMediaReadStatusColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingMediaTimeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingPendingStatusColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingQuoteAuthorColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingQuoteFilesizeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingQuoteMessageColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingQuoteSeparatorColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingQuoteTimeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingReadStatusColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrOutgoingTimeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrPhotoPickerSheetTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrPhotoPickerToolbarTintColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrPlaceholderSubtitleColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrPlaceholderTitleColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrQuickReplyBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrQuickReplyBackgroundColorHighlighted: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrQuickReplyBorder: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrQuickReplyTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrQuickReplyTextColorHighLighted: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrQuoteAccentColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrQuoteAuthorColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrQuoteBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrQuoteMessageColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrRefreshColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrScheduleAlertColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrScheduleIconBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrScrollToBottomBadgeColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrScrollToBottomBadgeTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSearchBarTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSearchBarTintColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSearchMessageAuthorTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSearchMessageDateTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSearchMessageFileTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSearchMessageMatchTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSearchMessageTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSearchScopeBarTintColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSendButtonColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSendButtonDisabledColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSendButtonHighlightColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSpecialisConnectSubtitleColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSpecialisConnectTitleColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrStarRatingColorCompleted: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrStarRatingColorDisabled: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrStarRatingColorEnabled: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSurveyCompletionColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrSurveyTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrTimeAndStatusBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrToolbarQuotedMessageAuthorColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrToolbarQuotedMessageColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrToolbarTintColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrWaitingSpecialistBgColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrWaitingSpecialistBorderColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrWaitingSpecialistSpinnerColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrjsqFileViewerColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrjsqMessageBubbleBlueColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrjsqMessageBubbleGreenColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrjsqMessageBubbleLightGrayColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrjsqMessageBubbleRedColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var thrjsqNavigationBarColor: UIKit.UIColor {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class QuickReply : ObjectiveC.NSObject {
  @objc final public let text: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum THRQuickReplyPresentationMode : Swift.UInt {
  case toolbar
  case embed
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public enum THRQuickReplyAlignment : Swift.UInt {
  case center
  case left
  case right
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public enum THRAPIVersion : Swift.UInt {
  case api15 = 16
  case api17 = 17
  case api18 = 18
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class THRAttributes : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var localizationConfig: LocalizationConfig?
  @objc public var statusBarStyle: UIKit.UIStatusBarStyle
  @objc public var refreshColor: UIKit.UIColor
  @objc public var navigationBarVisible: Swift.Bool
  @objc public var navigationBarCustomizeTitle: Swift.Bool
  @objc public var navigationBarTitle: Swift.String?
  @objc public var navigationBarTitleColor: UIKit.UIColor
  @objc public var navigationBarTitleFont: UIKit.UIFont
  @objc public var navigationBarSubtitleFont: UIKit.UIFont
  @objc public var navigationBarSubtitleColor: UIKit.UIColor
  @objc public var navigationBarSubtitleShowOrgUnit: Swift.Bool
  @objc public var navigationBarSubtitleVisible: Swift.Bool
  @objc public var navigationBarLarge: Swift.Bool
  @objc public var navigationBarKeyboardControlVisible: Swift.Bool
  @objc public var navigationBarKeyboardShowImage: UIKit.UIImage?
  @objc public var navigationBarKeyboardHideImage: UIKit.UIImage?
  @objc public var navigationBarShadow: Swift.Bool
  @objc public var navigationBarShadowSettings: THRSettingsShadow
  @objc public var navigationBarBackButtonColor: UIKit.UIColor
  @objc public var launchViewEnable: Swift.Bool
  @objc public var launchActivityViewColor: UIKit.UIColor
  @objc public var launchViewBackgroundColor: UIKit.UIColor
  @objc public var launchViewInnerBoxBackgroundColor: UIKit.UIColor
  @objc public var launchViewInnerBoxCornerRadius: CoreGraphics.CGFloat
  @objc @available(*, deprecated, message: "Используйте для задания минимального размера launchViewMinSize")
  public var launchViewInnerBoxSize: CoreGraphics.CGSize
  @objc public var launchViewMinSize: CoreGraphics.CGSize
  @objc public var launchViewTextColor: UIKit.UIColor
  @objc public var launchViewTextFont: UIKit.UIFont
  @objc public var loadingChatErrorImageWithCodeFrom400to599: UIKit.UIImage?
  @objc public var loadingChatErrorImage: UIKit.UIImage?
  @objc public var loadingChatTitleFont: UIKit.UIFont
  @objc public var loadingChatTitleColor: UIKit.UIColor
  @objc public var loadingChatSubtitleFont: UIKit.UIFont
  @objc public var loadingChatSubtitleColor: UIKit.UIColor
  @objc public var loadingChatRepeatButtonTitleFont: UIKit.UIFont
  @objc public var loadingChatRepeatButtonTitleColor: UIKit.UIColor
  @objc public var loadingChatRepeatButtonBackgroundColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var placeholderImage: UIKit.UIImage?
  @objc public var placeholderTitleColor: UIKit.UIColor
  @objc public var placeholderSubtitleColor: UIKit.UIColor
  @objc public var placeholderTitleFont: UIKit.UIFont
  @objc public var placeholderSubtitleFont: UIKit.UIFont
  @objc public var imageEdgesActived: Swift.Bool
  @objc public var imageEdges: UIKit.UIEdgeInsets
  @objc public var imageCornerRadius: CoreGraphics.CGFloat
  @objc public var toolbarbackgroundColor: UIKit.UIColor
  @objc public var toolbarSeparatorLineColor: UIKit.UIColor
  @objc public var toolbarTintColor: UIKit.UIColor
  @objc public var attachButtonImage: UIKit.UIImage?
  @objc public var attachButtonColor: UIKit.UIColor
  @objc public var attachButtonHighlightColor: UIKit.UIColor
  @objc public var showAttachButton: Swift.Bool
  @objc public var sendButtonColor: UIKit.UIColor
  @objc public var sendButtonHighlightColor: UIKit.UIColor
  @objc public var sendButtonDisabledColor: UIKit.UIColor
  @objc public var sendButtonFont: UIKit.UIFont
  @objc public var sendButtonImage: UIKit.UIImage?
  @objc public var myMessageFont: UIKit.UIFont
  @objc public var toolbarQuotedMessageAuthorFont: UIKit.UIFont
  @objc public var toolbarQuotedMessageFont: UIKit.UIFont
  @objc public var toolbarQuotedMessageAuthorColor: UIKit.UIColor
  @objc public var toolbarQuotedMessageColor: UIKit.UIColor
  @objc public var toolbarInputHasBorder: Swift.Bool
  @objc public var toolbarInputCornerRadius: CoreGraphics.CGFloat
  @objc public var toolbarInputMinimumHeight: CoreGraphics.CGFloat
  @objc public var toolbarInputMaximumHeight: CoreGraphics.CGFloat
  @objc public var toolbarInputTextColor: UIKit.UIColor
  @objc public var toolbarInputCursorColor: UIKit.UIColor
  @objc public var toolbarInputBackgroundColor: UIKit.UIColor
  @objc public var showWaitingForSpecialistProgress: Swift.Bool
  @objc public var waitingSpecialistSpinnerColor: UIKit.UIColor
  @objc public var waitingSpecialistBgColor: UIKit.UIColor
  @objc public var waitingSpecialistBorderColor: UIKit.UIColor
  @objc public var waitingSpecialistBorderWidth: CoreGraphics.CGFloat
  @objc public var bubbleMessageFont: UIKit.UIFont
  @objc public var bubbleMessageAudioFont: UIKit.UIFont
  @objc public var bubbleTimeFont: UIKit.UIFont
  @objc public var failedMessageFont: UIKit.UIFont
  @objc public var messageHeaderFont: UIKit.UIFont
  @objc public var messageHeaderTextColor: UIKit.UIColor
  @objc public var messageDeletedTextColor: UIKit.UIColor
  @objc public var messageEditedStatusImage: UIKit.UIImage?
  @objc public var quoteAuthorFont: UIKit.UIFont
  @objc public var quoteMessageFont: UIKit.UIFont
  @objc public var quoteTimeFont: UIKit.UIFont
  @objc public var quoteFilesizeFont: UIKit.UIFont
  @objc public var quoteAuthorColor: UIKit.UIColor
  @objc public var quoteMessageColor: UIKit.UIColor
  @objc public var quoteBackgroundColor: UIKit.UIColor
  @objc public var quoteAccentColor: UIKit.UIColor
  @objc public var messageBubbleFilledMaskImage: UIKit.UIImage?
  @objc public var messageBubbleStrokedMaskImage: UIKit.UIImage?
  @objc public var messageBubbleFilledMaskInsets: UIKit.UIEdgeInsets
  @objc public var messageBubbleStrokedMaskInsets: UIKit.UIEdgeInsets
  @objc public var messageContainerRightOffset: CoreGraphics.CGFloat
  @objc public var messageContainerLeftOffset: CoreGraphics.CGFloat
  @objc public var messageBubbleTextViewFrameInsets: UIKit.UIEdgeInsets
  @objc public var messageBubbleTextViewTextContainerInsets: UIKit.UIEdgeInsets
  @objc public var messageBubbleOppositeMargin: CoreGraphics.CGFloat
  @objc public var emptyImageColor: UIKit.UIColor
  @objc public var timeAndStatusBackgroundColor: UIKit.UIColor
  @objc public var specialisConnectTitleFont: UIKit.UIFont
  @objc public var specialisConnectSubtitleFont: UIKit.UIFont
  @objc public var specialisConnectTitleColor: UIKit.UIColor
  @objc public var specialisConnectSubtitleColor: UIKit.UIColor
  @objc public var typingText: Swift.String?
  @objc public var scheduleIcon: UIKit.UIImage?
  @objc public var scheduleAlertColor: UIKit.UIColor
  @objc public var scheduleAlertFont: UIKit.UIFont
  @objc public var scheduleIconBackgroundColor: UIKit.UIColor
  @objc public var scrollToLatest: Swift.Bool
  @objc public var scrollToBottomImage: UIKit.UIImage?
  @objc public var scrollToBottomBadgeColor: UIKit.UIColor
  @objc public var scrollToBottomBadgeTextColor: UIKit.UIColor
  @objc public var incomingBubbleStroked: Swift.Bool
  @objc public var incomingBubbleColor: UIKit.UIColor
  @objc public var incomingBubbleTextColor: UIKit.UIColor
  @objc public var incomingBubbleLinkColor: UIKit.UIColor
  @objc public var incomingTimeColor: UIKit.UIColor
  @objc public var showIncomingAvatar: Swift.Bool
  @objc public var incomingQuoteSeparatorColor: UIKit.UIColor
  @objc public var incomingQuoteAuthorColor: UIKit.UIColor
  @objc public var incomingQuoteMessageColor: UIKit.UIColor
  @objc public var incomingQuoteTimeColor: UIKit.UIColor
  @objc public var incomingQuoteFilesizeColor: UIKit.UIColor
  @objc public var incomingFileIconTintColor: UIKit.UIColor
  @objc public var incomingFileIconBgColor: UIKit.UIColor
  @objc public var incomingMediaTimeColor: UIKit.UIColor
  @objc public var commonMessageAvatarSize: CoreGraphics.CGFloat
  @objc public var systemMessageAvatarSize: CoreGraphics.CGFloat
  @objc public var messageAvatarToBubbleOffset: CoreGraphics.CGFloat
  @objc public var failedBubbleStroked: Swift.Bool
  @objc public var failedBubbleColor: UIKit.UIColor
  @objc public var outgoingBubbleStroked: Swift.Bool
  @objc public var outgoingBubbleColor: UIKit.UIColor
  @objc public var outgoingBubbleTextColor: UIKit.UIColor
  @objc public var outgoingBubbleLinkColor: UIKit.UIColor
  @objc public var outgoingTimeColor: UIKit.UIColor
  @objc public var outgoingPendingStatusColor: UIKit.UIColor
  @objc public var outgoingDeliveredStatusColor: UIKit.UIColor
  @objc public var outgoingReadStatusColor: UIKit.UIColor
  @objc public var outgoingPendingStatusImage: UIKit.UIImage?
  @objc public var outgoingDeliveredStatusImage: UIKit.UIImage?
  @objc public var outgoingReadStatusImage: UIKit.UIImage?
  @objc public var showOutgoingAvatar: Swift.Bool
  @objc public var avatarPlaceholderImage: UIKit.UIImage?
  @objc public var outgoingQuoteSeparatorColor: UIKit.UIColor
  @objc public var outgoingQuoteAuthorColor: UIKit.UIColor
  @objc public var outgoingQuoteMessageColor: UIKit.UIColor
  @objc public var outgoingQuoteTimeColor: UIKit.UIColor
  @objc public var outgoingQuoteFilesizeColor: UIKit.UIColor
  @objc public var outgoingFileIconTintColor: UIKit.UIColor
  @objc public var outgoingFileIconBgColor: UIKit.UIColor
  @objc public var outgoingMediaTimeColor: UIKit.UIColor
  @objc public var outgoingMediaPendingStatusColor: UIKit.UIColor
  @objc public var outgoingMediaDeliveredStatusColor: UIKit.UIColor
  @objc public var outgoingMediaReadStatusColor: UIKit.UIColor
  @objc public var searchScopeBarTintColor: UIKit.UIColor
  @objc public var searchBarTextColor: UIKit.UIColor
  @objc public var searchBarTintColor: UIKit.UIColor
  @objc public var searchScopeBarFont: UIKit.UIFont
  @objc public var searchBarTextFont: UIKit.UIFont
  @objc public var searchBarIconTintColor: UIKit.UIColor
  @objc public var searchEnabled: Swift.Bool
  @objc public var searchImageNotFound: UIKit.UIImage?
  @objc public var searchTextColorNotFound: UIKit.UIColor
  @objc public var searchTextFontColorNotFound: UIKit.UIFont
  @objc public var searchIconDisabled: Swift.Bool
  @objc public var clearSearchIcon: UIKit.UIImage?
  @objc public var findedMessageHeaderTextColor: UIKit.UIColor
  @objc public var findedMessageHeaderBackgroundColor: UIKit.UIColor
  @objc public var findedMessageHeaderTextFont: UIKit.UIFont
  @objc public var findMoreMessageTextColor: UIKit.UIColor
  @objc public var findMoreMessageTextFont: UIKit.UIFont
  @objc public var searchMessageAuthorTextColor: UIKit.UIColor
  @objc public var searchMessageTextColor: UIKit.UIColor
  @objc public var searchMessageDateTextColor: UIKit.UIColor
  @objc public var searchMessageFileTextColor: UIKit.UIColor
  @objc public var searchMessageMatchTextColor: UIKit.UIColor
  @objc public var searchMessageAuthorTextFont: UIKit.UIFont
  @objc public var searchMessageMatchTextFont: UIKit.UIFont
  @objc public var searchMessageTextFont: UIKit.UIFont
  @objc public var searchMessageFileTextFont: UIKit.UIFont
  @objc public var searchMessageDateTextFont: UIKit.UIFont
  @objc public var linkPreviewEnabled: Swift.Bool
  @objc public var photoPickerBackgroundColor: UIKit.UIColor
  @objc public var photoPickerToolbarTintColor: UIKit.UIColor
  @objc public var photoPickerToolbarButtonFont: UIKit.UIFont
  @objc public var photoPickerCheckmarkIcon: UIKit.UIImage?
  @objc public var photoPickerEmptyCheckmarkIcon: UIKit.UIImage?
  @objc public var photoPickerSheetTextColor: UIKit.UIColor
  @objc public var photoPickerSheetTextFont: UIKit.UIFont
  @objc public var useSystemFilePicker: Swift.Bool
  @objc public var fileViewerTitleColor: UIKit.UIColor?
  @objc public var fileViewerNavBarBackgroundColor: UIKit.UIColor?
  @objc public var fileViewerNavBarTintColor: UIKit.UIColor?
  @objc public var fileViewerBackgroundColor: UIKit.UIColor
  @objc public var fileViewerTitleFont: UIKit.UIFont
  @objc public var canShowSpecialistInfo: Swift.Bool
  @objc public var starRatingColorEnabled: UIKit.UIColor
  @objc public var likeRatingColorEnabled: UIKit.UIColor
  @objc public var starRatingColorDisabled: UIKit.UIColor
  @objc public var likeRatingColorDisabled: UIKit.UIColor
  @objc public var starRatingColorCompleted: UIKit.UIColor
  @objc public var likeRatingColorCompleted: UIKit.UIColor
  @objc public var likeLabelOnStarColor: UIKit.UIColor
  @objc public var likeLabelUnderStarColor: UIKit.UIColor
  @objc public var surveyTextColor: UIKit.UIColor
  @objc public var surveyTextFont: UIKit.UIFont
  @objc public var surveyCompletionColor: UIKit.UIColor
  @objc public var surveyCompletionFont: UIKit.UIFont
  @objc public var surveyCompletionDelay: Swift.Int
  @objc public var iconStarRatingEmty: UIKit.UIImage?
  @objc public var iconStarRatingFull: UIKit.UIImage?
  @objc public var iconLikeEmpty: UIKit.UIImage?
  @objc public var iconDislikeEmpty: UIKit.UIImage?
  @objc public var iconLikeFull: UIKit.UIImage?
  @objc public var iconDislikeFull: UIKit.UIImage?
  @objc public var quickReplyPresentationMode: THRQuickReplyPresentationMode
  @objc public var quickReplyAlignment: THRQuickReplyAlignment
  @objc public var quickReplyFont: UIKit.UIFont
  @objc public var quickReplyBorderCornerRadius: Foundation.NSNumber
  @objc public var quickReplyBorderColor: UIKit.UIColor
  @objc public var quickReplyBackgroundColor: UIKit.UIColor
  @objc public var quickReplyTextColor: UIKit.UIColor
  @objc public var quickReplyBackgroundColorHighlighted: UIKit.UIColor
  @objc public var quickReplyTextColorHighLighted: UIKit.UIColor
  @objc public var quickReplyButtonHeight: CoreGraphics.CGFloat
  @objc public var quickReplyBorderWidth: CoreGraphics.CGFloat
  @objc public var voiceRecordingAllowed: Swift.Bool
  @objc public var voiceMessageRecordButtonImage: UIKit.UIImage?
  @objc public var voiceMessageSendButtonImage: UIKit.UIImage?
  @objc public var voiceMessageRecordSendButtonColor: UIKit.UIColor
  @objc public var voiceMessagePlayImage: UIKit.UIImage?
  @objc public var voiceMessagePauseImage: UIKit.UIImage?
  @objc public var incomingVoiceMessagePlayPauseColor: UIKit.UIColor
  @objc public var outgoingVoiceMessagePlayPauseColor: UIKit.UIColor
  @objc public var previewVoiceMessagePlayPauseColor: UIKit.UIColor
  @objc public var previewVoiceMessageBackgroundColor: UIKit.UIColor
  @objc public var incomingVoiceMessageProgressColor: UIKit.UIColor
  @objc public var outgoingVoiceMessageProgressColor: UIKit.UIColor
  @objc public var previewVoiceMessageProgressColor: UIKit.UIColor
  @objc public var showCloseButton: Swift.Bool
  @objc public var closeButtonColor: UIKit.UIColor?
  @objc public var closeButtonImage: UIKit.UIImage?
  @objc public var newChatCenterApi: Swift.Bool
  @objc public var customHTTPHeadersForDataStore: [Swift.String : Swift.String]?
  @objc public var historyLoadingCount: Foundation.NSNumber
  @objc public var callReceiveResponseEnabled: Swift.Bool
  @objc public var clearChatHistoryIfSocketReconnect: Swift.Bool
  @objc public var allowUntrustedSSLCertificate: Swift.Bool
  @objc public var trustedCertificates: [THRCert]
  @objc public var logLevels: ThreadsLogLevel
  @objc public var logFileName: Swift.String?
  @objc public var logFileSizeMb: Swift.Int
  @objc public var logFileMaxCount: Swift.Int
  @objc public var toastViewTextCopy: Swift.String
  @objc public var toastViewTextColor: UIKit.UIColor
  @objc public var toastViewBackgroundColor: UIKit.UIColor
  @objc public var toastViewSize: CoreGraphics.CGSize
  @objc public var photoPickerMaxImagesCount: Swift.UInt {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc public static func defaultAttributes() -> THRAttributes
  @objc deinit
}
@objc extension Foundation.NSPredicate {
  @objc dynamic public class func unreadMessages() -> Foundation.NSPredicate
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class SQPreviewCell : UIKit.UICollectionViewCell {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class SQAlbumCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func startLoading()
  @objc @_Concurrency.MainActor(unsafe) public func stopLoading()
  @objc @_Concurrency.MainActor(unsafe) public func updateImage(_ image: UIKit.UIImage?)
  @objc @_Concurrency.MainActor(unsafe) public func configure(albumName: Swift.String, photosCount: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class THRMessageInfo : ObjectiveC.NSObject {
  @objc public init(text: Swift.String?, senderName: Swift.String, hasAttachment: Swift.Bool)
  final public let senderName: Swift.String
  final public let text: Swift.String?
  final public let hasAttachment: Swift.Bool
  @objc deinit
}
extension Swift.String {
  public func md5() -> Swift.String
  public func urlEncoded() -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class SearchingForSpecialistFooterView : UIKit.UICollectionReusableView {
  @objc @_Concurrency.MainActor(unsafe) public static let footerViewHeight: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public static var footerReuseIdentifier: Swift.String
  @objc(configureWithDefaultSettingsforCollectionView:) @_Concurrency.MainActor(unsafe) public func configureDefaultSettings(collectionView: UIKit.UICollectionView)
  @objc deinit
}
public enum URLEmbeddedViewError : Swift.Error {
  case invalidURLString(Swift.String)
}
public enum Result<T> {
  case success(T)
  case failure(Swift.Error)
  public var value: T? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func fillToSuperview()
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func anchor(top: UIKit.NSLayoutYAxisAnchor? = nil, left: UIKit.NSLayoutXAxisAnchor? = nil, bottom: UIKit.NSLayoutYAxisAnchor? = nil, right: UIKit.NSLayoutXAxisAnchor? = nil, topConstant: CoreGraphics.CGFloat = 0, leftConstant: CoreGraphics.CGFloat = 0, bottomConstant: CoreGraphics.CGFloat = 0, rightConstant: CoreGraphics.CGFloat = 0, widthConstant: CoreGraphics.CGFloat = 0, heightConstant: CoreGraphics.CGFloat = 0) -> [UIKit.NSLayoutConstraint]
  @_Concurrency.MainActor(unsafe) public func anchorCenterXToSuperview(constant: CoreGraphics.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) public func anchorCenterYToSuperview(constant: CoreGraphics.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) public func anchorCenterSuperview()
  @_Concurrency.MainActor(unsafe) public func thrjsqImage() -> UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addContainedView(_ inSubView: UIKit.UIView)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class SQActionCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) public func configure(actionString: Swift.String)
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
  public typealias NetworkReachable = (Reachability) -> Swift.Void
  public typealias NetworkUnreachable = (Reachability) -> Swift.Void
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable
    case reachableViaWiFi
    case reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: Reachability.NetworkStatus, b: Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable
    case wifi
    case cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: Reachability.Connection, b: Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: Reachability.NetworkReachable?
  public var whenUnreachable: Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: Reachability.Connection {
    get
  }
  public var connection: Reachability.Connection {
    get
  }
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension Foundation.URLRequest {
  public enum HTTPMethod : Swift.String {
    case GET
    case PUT
    case POST
    case DELETE
    case HEAD
    case OPTIONS
    case TRACE
    case CONNECT
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var method: Foundation.URLRequest.HTTPMethod? {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class SQPhotoPreviewCell : UIKit.UICollectionViewCell {
  @objc deinit
}
@objc @objcMembers public class LocalizationConfig : ObjectiveC.NSObject {
  @objc public init(bundle: Foundation.Bundle, tableName: Swift.String)
  @objc final public let bundle: Foundation.Bundle
  @objc final public let tableName: Swift.String
  @objc deinit
}
@objc @objcMembers public class PushUserInfo : ObjectiveC.NSObject {
  @objc public init?(from pushUserInfo: [Swift.String : Any])
  @objc final public let alert: Swift.String
  @objc final public let skillId: Swift.Int
  @objc final public let expiredAt: Swift.String
  @objc final public let chlSentAt: Swift.String
  @objc final public let campaign: Swift.String
  @objc final public let priority: Swift.Int
  @objc final public let senderName: Swift.String
  @objc final public let chatMessageId: Swift.String?
  @objc public class func checkMinimumPush(from pushUserInfo: [Swift.String : Any]) -> Swift.Bool
  @objc deinit
}
@objc public protocol StarRateViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func valueDidChange(sender: StarRateView)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class StarRateView : UIKit.UIView {
  @objc convenience dynamic public init()
  @objc(initWithMinimumValue:maximumValue:) @_Concurrency.MainActor(unsafe) convenience public init(minimumValue: Swift.UInt, maximumValue: Swift.UInt)
  @objc @_Concurrency.MainActor(unsafe) public init(minimumValue: Swift.UInt, maximumValue: Swift.UInt, value: Swift.UInt, spacing: CoreGraphics.CGFloat, emptyStarImage: UIKit.UIImage?, emptyStarColor: UIKit.UIColor, filledStarImage: UIKit.UIImage?, fullStarColor: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: StarRateViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var maximumValue: Swift.UInt
  @objc @_Concurrency.MainActor(unsafe) public var minimumValue: Swift.UInt
  @objc @_Concurrency.MainActor(unsafe) public var spacing: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var emptyStarImage: UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public var emptyStarColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) public var filledStarImage: UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public var fullStarColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) public var value: Swift.UInt {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIKit.UIColor! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setNeedsLayout()
  @objc deinit
}
@objc(ThreadsLogLevel) public class ThreadsLogLevel : ObjectiveC.NSObject, Swift.OptionSet {
  @objc required public init(rawValue: Swift.Int)
  @objc public static let off: ThreadsLogLevel
  @objc public static let info: ThreadsLogLevel
  @objc public static let network: ThreadsLogLevel
  @objc public static let networkSock: ThreadsLogLevel
  @objc public static let userInterface: ThreadsLogLevel
  @objc public static let error: ThreadsLogLevel
  @objc public static let all: ThreadsLogLevel
  @objc final public let rawValue: Swift.Int
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public func contains(_ member: ThreadsLogLevel) -> Swift.Bool
  public typealias ArrayLiteralElement = ThreadsLogLevel
  public typealias Element = ThreadsLogLevel
  public typealias RawValue = Swift.Int
  @objc deinit
}
@objc extension Foundation.FileManager {
  @objc dynamic public func saveData(data: Foundation.Data, toCacheFile name: Swift.String) -> Foundation.URL?
  @objc dynamic public func getURL(forCachedFile name: Swift.String) -> Foundation.URL?
  @objc dynamic public func getData(forCachedFile name: Swift.String) -> Foundation.Data?
  @objc dynamic public func deleteCache()
}
extension SearchScope : Swift.Equatable {}
extension SearchScope : Swift.Hashable {}
extension SearchScope : Swift.RawRepresentable {}
extension THRAuthMethod : Swift.Equatable {}
extension THRAuthMethod : Swift.Hashable {}
extension THRAuthMethod : Swift.RawRepresentable {}
extension SearchState : Swift.Equatable {}
extension SearchState : Swift.Hashable {}
extension SearchState : Swift.RawRepresentable {}
extension THRQuickReplyPresentationMode : Swift.Equatable {}
extension THRQuickReplyPresentationMode : Swift.Hashable {}
extension THRQuickReplyPresentationMode : Swift.RawRepresentable {}
extension THRQuickReplyAlignment : Swift.Equatable {}
extension THRQuickReplyAlignment : Swift.Hashable {}
extension THRQuickReplyAlignment : Swift.RawRepresentable {}
extension THRAPIVersion : Swift.Equatable {}
extension THRAPIVersion : Swift.Hashable {}
extension THRAPIVersion : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension Reachability.NetworkStatus : Swift.Hashable {}
extension Reachability.Connection : Swift.Equatable {}
extension Reachability.Connection : Swift.Hashable {}
extension Foundation.URLRequest.HTTPMethod : Swift.Equatable {}
extension Foundation.URLRequest.HTTPMethod : Swift.Hashable {}
extension Foundation.URLRequest.HTTPMethod : Swift.RawRepresentable {}
